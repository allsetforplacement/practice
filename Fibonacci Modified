import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {
    public static BigInteger fibonacciModified(int t1, int t2, int n,BigInteger[] arr) {
     if(n == 1)
        return BigInteger.valueOf(t1);
     if(n == 2)
        return BigInteger.valueOf(t2);
    try{
         if(arr[n].compareTo(new BigInteger("0")) >0)
           return arr[n];
       }
    catch(Exception e)
        {
          
        }
        
        BigInteger fib1=fibonacciModified(t1,t2,n - 1,arr);
        BigInteger fib2=fibonacciModified(t1,t2,n - 2,arr);
         BigInteger output=fib1.pow(2).add(fib2);
         arr[n]=output;

     return output;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int t1 = Integer.parseInt(firstMultipleInput[0]);

        int t2 = Integer.parseInt(firstMultipleInput[1]);

        int n = Integer.parseInt(firstMultipleInput[2]);
        BigInteger[] arr=new BigInteger[n+1];

        BigInteger result = Result.fibonacciModified(t1, t2, n,arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
